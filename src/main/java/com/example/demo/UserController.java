package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.stereotype.Controller; 
import org.springframework.web.bind.annotation.GetMapping; 
import org.springframework.web.bind.annotation.PostMapping; 
import org.springframework.web.bind.annotation.RequestMapping; 
import org.springframework.web.bind.annotation.RequestParam; 
import org.springframework.web.bind.annotation.ResponseBody; 
  
// This means that this  
// class is a Controller 
@Controller    
  
// This means URL's start with /geek (after Application path) 
@RequestMapping(path="/db")  
public class UserController { 
    
    // This means to get the bean called geekuserRepository 
    // Which is auto-generated by Spring, we will use it 
      // to handle the data 
    @Autowired 
    private UserRepository userRepository; 
  
    // Map ONLY POST Requests 
    @PostMapping(path="/adduser")  
    public @ResponseBody String addUsers (@RequestParam String mail, @RequestParam String password, @RequestParam String role,
                                        @RequestParam String image) { 
        
        // @ResponseBody means the returned String 
          // is the response, not a view name 
        // @RequestParam means it is a parameter 
          // from the GET or POST request 
        
        User user = new User(); 
        user.setMail(mail); 
        user.setPassword(password);
        user.setRole(role); 
        user.setImage(image); 
        if (checkUserForAdding(user) == true) { 
          userRepository.save(user); 
          return "Details got Saved";
        }
        else return "This email has already used";
    }
     /**
      * проверяет наличие пользователя с таким email в бд
      * @param new_user - пользователь, которого нужно проверить
      * @return true - если пользователь не найден
      */
    private boolean checkUserForAdding(User new_user) {
        Iterable <User> listOfAllusers = getAllUsers();
        for (User user : listOfAllusers) {
          if (new_user.getMail().equals(user.getMail())) return false;
        }
        return true;
    }
    
    /**
     * проверяет наличие пользователя с такими данными в бд
     * @param new_user - пользователь, которого нужно проверить
     * @return true - если пользователь найден
     */
    private boolean checkUserForEnter(User new_user) {
      Iterable <User> listOfAllusers = getAllUsers();
      for (User user : listOfAllusers) {
        if (new_user.getMail().equals(user.getMail()) && new_user.getPassword().equals(user.getPassword())) return true;
      }
      return false;
    }
    
    /**
     * обрабатывает POST-запросы на вход в аккаунт
     * @param mail - введенная почта
     * @param password - введенный пароль
     * @return true - пользователь с такими данными существует
     */
    @PostMapping(path="/enter")  
    public @ResponseBody String enter(@RequestParam String mail, @RequestParam String password) { 
      User user = new User(); 
      user.setMail(mail); 
      user.setPassword(password);
      if (checkUserForEnter(user) == true) {  
        return "OK";
      }
      else return "This user doesn't exist";
    }

    /**
     * отвечает на GET-запрос "Покажи все строки бд"
     * @return информацию, содержащуюся в бд
     */
    @GetMapping(path="/users") 
    public @ResponseBody Iterable<User> getAllUsers() { 
        // This returns a JSON or XML with the Book 
        return userRepository.findAll(); 
    } 
} 